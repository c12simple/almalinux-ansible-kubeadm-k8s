---
- hosts: all
  become: true
  vars_files:
  - variables
  tasks:
  - name: Set Host name
    ansible.builtin.hostname:
      name: "{{ inventory_hostname }}"

  - name: Make sure we have a 'wheel' group
    group:
      name: wheel
      state: present
  
  - name: Allow 'wheel' group to have passwordless sudo
    lineinfile:
      dest: /etc/sudoers
      state: present
      regexp: '^%wheel'
      line: '%wheel ALL=(ALL) NOPASSWD: ALL'
      validate: 'visudo -cf %s'
  
  - name: Add sudoers users to wheel group
    user:
      name=pydio
      groups=wheel
      append=yes
      state=present
      createhome=yes
    
  - name: Install the dependencies
    ansible.builtin.yum:
      name: "{{ item }}"
      state: present
    loop:
      "{{ dependencies }}"

  - name: Configure firewalld kube admin
    ansible.builtin.shell: |
      firewall-cmd --permanent --add-port={6443,2379,2380,10250,10251,10252,10257,10259,179,4789}/tcp
      firewall-cmd --permanent --add-port=4789/udp
      firewall-cmd --reload
    when: inventory_hostname in groups['master']

  - name: Configure firewalld kube nodes
    ansible.builtin.shell: |
      firewall-cmd --permanent --add-port={179,2379,4789,10250,30000-32767}/tcp
      firewall-cmd --permanent --add-port=4789/udp
      firewall-cmd --reload
    when: inventory_hostname in groups['master']

  - name: Turn off swap
    ansible.builtin.command: swapoff -a
  
  - name: Turn off swap in fstab
    ansible.builtin.shell: |
      sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

  - name: Build hosts file
    lineinfile:
      dest: /etc/hosts
      regexp: '.*{{ item }}$'
      line: '{{ hostvars[item].ansible_host }} {{item}}'
      state: present
    with_items: '{{ groups["all"] }}'

  - name: Load two required modules
    ansible.builtin.shell: |
      modprobe overlay
      modprobe br_netfilter

  - name: Add configuration to make them loadable at boot time
    blockinfile:
      path: /etc/modules-load.d/crio.conf
      create: true
      block: |
        overlay
        br_netfilter

  - name: Setup required sysctl params, these persist across reboots.
    sysctl:
      name: "{{ item }}"
      value: '1'
      sysctl_set: yes
      state: present
      reload: yes
      sysctl_file: /etc/sysctl.d/99-kubernetes-cri.conf
    loop:
      "{{ sysctl_set }}"

  - name: Add official crio repo
    blockinfile:
      path: /etc/yum.repos.d/crio.repo
      create: true
      unsafe_writes: true
      block: |  
        [cri-o]
        name=CRI-O
        baseurl=https://pkgs.k8s.io/addons:/cri-o:/stable:/{{ crio_version }}/rpm/
        enabled=1
        gpgcheck=1
        gpgkey=https://pkgs.k8s.io/addons:/cri-o:/stable:/{{ crio_version }}/rpm/repodata/repomd.xml.key

  # - name: Install the container-selinux package
  #   ansible.builtin.yum:
  #     name: container-selinux
  #     state: present

  - name: Install the cri-o package
    ansible.builtin.yum:
      name: cri-o
      state: present

  - name: Restart crio service
    ansible.builtin.service:
      name: crio
      state: restarted
      enabled: true

  - name: Add the Kubernetes repository
    blockinfile:
      path: /etc/yum.repos.d/kubernetes.repo
      create: true
      unsafe_writes: true
      block: |
        [kubernetes]
        name=Kubernetes
        baseurl=https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version }}/rpm/
        enabled=1
        gpgcheck=1
        gpgkey=https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version }}/rpm/repodata/repomd.xml.key
        #exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni
        #exclude=kubelet kubeadm kubectl

  - name: Install all Kubernetes modules (kubelet, kubeadm, kubectl)
    ansible.builtin.yum:
      name: "{{ packages }}"
      state: present
    vars:
      packages:
        - kubelet
        - kubeadm
        - kubectl

  - name: Enable kubelet
    ansible.builtin.service:
      name: kubelet
      enabled: true
      state: restarted

  - name: Check if Kubernetes cluster is initialized
    shell: "kubectl --kubeconfig=/etc/kubernetes/admin.conf cluster-info"
    register: cluster_status
    ignore_errors: yes
    when: inventory_hostname in groups['master']    

  - name: Print cluster status
    debug:
      msg: "{{ cluster_status.stdout }}"
    when: inventory_hostname in groups['master']      
        
  - name: Initializing Kubernetes cluster
    ansible.builtin.command: |
      kubeadm init --apiserver-advertise-address=192.168.61.10 --control-plane-endpoint=controller.test.lab:6443  --pod-network-cidr=10.222.0.0/16
    when:
      - inventory_hostname in groups['master']
      - "'running' not in cluster_status.stdout"

  - name: Install Calico Add-on
    become: false
    ansible.builtin.command: >
      kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.29.2/manifests/calico.yaml
    when: inventory_hostname in groups['master']

  - name: Retrieve Kubernetes join command that is used to join worker node(s)
    become: false
    ansible.builtin.command: kubeadm token create --print-join-command
    register: join_command_raw
    when: inventory_hostname in groups['master']

  - name: Set join command
    ansible.builtin.set_fact:
      join_command: "{{ join_command_raw.stdout_lines[0] }}"
    when: inventory_hostname in groups['master']

  - name: Print the join_command
    debug:
      msg: "{{ join_command }}"
    when: inventory_hostname in groups['master']

  - name: Join node to the cluster
    ansible.builtin.command: "{{ hostvars['controller.test.lab'].join_command }}"
    when: inventory_hostname in groups['workers']

  - name: Add k alias on Master Node
    become: false
    ansible.builtin.lineinfile:
      path: ~/.bashrc
      line: alias k=kubectl
      regexp: '^alias k=kubectl&'
      state: present
      insertafter: EOF
      create: true
      mode: '0644'
    when: inventory_hostname in groups['master']

  - name: Install helm
    ansible.builtin.shell: |
      set -o pipefail
      curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
    when: inventory_hostname in groups['master']
